[
  {
    "slug": "pokemon-project",
    "title": "Pokémon Project",
    "date": "2025-04-18",
    "excerpt": "This project is the second assignment for my WEB2 course. It is a Pokémon web app designed to display all Pokémon and their information such as height, weight, stats, and abilities.",
    "author": "Frederik Handberg",
    "coverImage": "/pokemon-list.png",
    "tags": [
      "Vite",
      "TypeScript",
      "React Router v7",
      "React Query",
      "TailwindCSS"
    ],
    "readingTime": "3 min read",
    "content": "\nGitHub repository: [https://github.com/frederikhandberg0709/pokemon-project](https://github.com/frederikhandberg0709/pokemon-project)\n\n## Tech Stack\n\n- **Build-Tool:** Vite\n- **Language:** TypeScript\n- **Routing:** React Router v7\n- **Data Fetching**: React Query\n- **Styling:** TailwindCSS\n- **API:** PokéAPI\n\n## Implementation\n\nI have two React Query hooks that I use to fetch Pokémon information from the PokéAPI.\n\nThe first hook is called `usePokemonList`. I use this to fetch all Pokémon. I also added support for pagination in this hook, as implementing pagination was one of the requirements for the assignment.\n\nI set the limit to 20, so that 20 Pokémon are displayed on each page.\nThe user can click on the \"Next\" button to go to the next page.\n\nThe second React Query hook I implement is called `usePokemonDetails`. The purpose of this hook is to fetch information for a specific Pokémon by providing its ID.\nOne caveat of the PokéAPI is that it does not provide the ID in the JSON objects. Instead, the ID can be extracted from the URL. I achieved this by implementing a utility function that I called `getPokemonIdFromUrl`.\n\nThis is not the only utility function I implemented. I ended up creating three utility functions in total.\n\n`getColorByPokemonId` is a utility function that assigns a color to each Pokémon depending on its ID. This function is being used in the Pokémon list. The color is simply assigned by calculation the remainder when dividing the ID by the number of types (which is 18).\n\nThe last utility function I implement is called `getPokemonImageUrl`. I wanted to display an image of the Pokémon. This can be done using the URL `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`. Since I had already implemented the `getPokemonIdFromUrl` function, I was able to reuse it to extract the correct ID for the image URL.\n\nAs can be seen in the first image of the web app, the Pokémon cards all have the same layout, so for this I implemented a component called `PokemonCard`. The component needs five pieces of information:\n\n- **id** – The ID of the Pokémon, used to fetch the correct information for that specific Pokémon.\n- **number** – The ID displayed in the format of #5 if the ID is 5.\n- **name** – The name of the Pokémon.\n- **imageSrc** – The URL for the Pokémon's image.\n- **cardColor** – The background color of the card, based on the Pokémon’s ID.\n\n```tsx\n<PokemonCard\n  key={pokemon.id}\n  id={pokemon.id}\n  name={pokemon.name}\n  number={`#${getPokemonIdFromUrl(pokemon.url)}`}\n  imageSrc={getPokemonImageUrl(pokemon.url)}\n  cardColor={getColorByPokemonId(Number(pokemon.id))}\n/>\n```\n\nBesides supporting pagination, another requirement was to include at least two routes in our web app and use React Router to switch between the routes. Therefore, I added a second page to display detailed information about a specific Pokémon.\n\n![Pokémon details page](/pokemon-details.png)\n\nOn this page, I use the `usePokemonDetails` hook to fetch additional information about the Pokémon, beyond just the name and URL.\n"
  },
  {
    "slug": "semester-project-3",
    "title": "Semester Project 3",
    "date": "2025-04-18",
    "excerpt": "This project was developed as part of our third semester project (SEP3) for my **Software Engineering** degree.",
    "author": "Frederik Handberg",
    "coverImage": "/Blazor_Properties.jpeg",
    "tags": [
      "Java Spring Boot",
      "SignalR",
      "Blazor",
      "JavaFX",
      "PostgreSQL"
    ],
    "readingTime": "7 min read",
    "content": "\nThe goal of the semester project was to design and implement a distributed system consisting of at least two servers. Our team chose to build a system for a fictional real estate agency called **Real Estate Plus**.\n\nGitHub repository: [https://github.com/frederikhandberg0709/SEP3](https://github.com/frederikhandberg0709/SEP3)\n\n## Project Structure\n\nThe project is structured as follows:\n\n- `/Blazor`: A Blazor web application for customers.\n- `/GUI`: A JavaFX desktop application designed for administrative users.\n- `/restful-server`: A Java Spring Boot REST server that handles backend operations and API requests.\n- `/signalr-server`: A SignalR server that delivers real-time notifications to the Blazor web application.\n\n## Functional Requirements\n\nThe system was designed to meet the following functional requirements defined through user stories. Each user story represents a specific feature written to reflect the user's goals and interactions with the system.\n\n**Create user account:** As a customer, I want to have the ability to create an account, so that I can access extra features like save bookmarks and book an agent.\n\n**Create administrator account:** As an administrator, I want to have the ability to create an account, so that I can manage properties, bookings, and agents.\n\n**Update user information:** As a customer, I want to be able to update my user account details, so that the agency can still contact me if my information changes.\n\n**Property filters:** As a customer, I want to have the ability to use filters such as, property type, so that I can find a property that matches my needs.\n\n**Book agent:** As a customer, I want to be able to book an appointment with an agent, so that I can receive further information and ask questions about a specific property.\n\n**Bookmark property listings:** As a customer, I want to be able to bookmark listings, so that I can easily revisit and review them later.\n\n**Real-time notifications:** As a customer, I want to receive notifications about my bookmarked properties, so that I can stay updated on any changes to them.\n\n**Search in admin dashboard:** As an administrator, I want to be able to search for property listings, so that I can quickly find the specific property I'm looking for.\n\n**Create property listing:** As an administrator, I want to be able to create new property listings, so that they can be added to the website.\n\n**Upload property images:** As an administrator, I want to be able to upload images of properties, so that customers can visually assess whether they are interested in a property.\n\n**Update property details:** As an administrator, I want to be able to update the details of property listings, so that I can ensure all information remains accurate and up to date.\n\n**Delete property listing:** As an administrator, I want to be able to delete property listings, so that outdated or irrelevant listings no longer appear to customers.\n\n## System Architecture\n\nThis project consists of five subsystems:\n\n![High-level system architecture diagram](/High_level_system_architecture.png)\n\n### PostgreSQL database\n\nThe PostgreSQL database is he data store for the entire system. It sores all the domain data such as:\n\n- User accounts.\n- Property listings.\n- Bookmarks.\n- Bookings.\n- Agents.\n\nThe database is exclusively accessed by the Spring Boot REST server.\n\n### Spring Boot REST server\n\nThe REST server built with Java Spring Boot is the backend of the system.\n\nIt acts as the middleman and is responsible for:\n\n- Handling HTTP requests from the Blazor web app and the JavaFX desktop app.\n- Performs authentication and authorization using Spring Security.\n- Writing and fetching data from the database.\n- Notifies the SignalR server when prices of a property changes.\n\n### SignalR notification server\n\nThe SignalR server is responsible for handling real-time communication with the Blazor web application.\n\n### JavaFX desktop application\n\nThe JavaFX desktop application is made for administrators of the real estate agency who manage the backend data.\n\nThe app provides a GUI to:\n\n- Create new accounts for admins.\n- Create, update, and delete property listings.\n- Manage agents.\n- View booking appointments.\n\nThe JavaFX desktop app is communicating with the REST API for all HTTP requests. Administrator accounts are assigned the `ADMIN` role.\n\n### Blazor web application\n\nThe Blazor web application is the frontend for customers.\n\nIt allows users to:\n\n- Register a new customer account.\n- Browse and bookmark property listings.\n- Book appointments with agents.\n- Receive real-time notifications when the price changes for a bookmarked property.\n- Update personal profile information.\n\nThe web application communicated with the REST API for all the data operations and connects to the SignalR server to receive notifications instantly. Customers who register through the web app are assigned the `USER` role by default.\n\n## System Implementation\n\n### Tech Stack\n\n- `Frontend (Web)`: Blazor\n- `Frontend (Desktop)`: JavaFX\n- `Backend (REST API)`: Java Spring Boot\n- `Real-time notifications`: SignalR\n- `Database`: PostgreSQL\n\n## Project Features\n\n### User authentication\n\n**Blazor web application for customers:**\n\n![Login page of the Blazor web application](/Blazor_Login.jpeg)\n\n![Registration page of the Blazor web application](/Blazor_Register.jpeg)\n\n**JavaFX desktop application for administrators:**\n\n![Login window of the JavaFX desktop application](/JavaFX_Login.png)\n\n![Registration window of the JavaFX desktop application](/JavaFX_Register.png)\n\n**Role-based authentication**\\\nThe system uses role-based authentication to manage access and permissions.\n\nThere are two distinct user roles: `USER` and `ADMIN`:\n\n- Customers who register for an account through the Blazor web application are automatically assigned the `USER` role.\n- Administrators who register through the JavaFX desktop application are automatically assigned the `ADMIN` role.\n\nAdministrators have additional privileges, such as managing property listings. Therefore, it is important to distinguish between administrators and customers. This ensures that customers cannot access API endpoints they are not authorized to use.\n\n**API endpoint security**\\\nAccess control is enforced by our Java REST API, which uses Spring Security to handle authentication and authorization.\nEndpoint security is achieved by using `@PreAuthorize(\"hasRole('ADMIN')\")` on endpoints that only administrators are allowed to access.\n\n### Manage property listings\n\nAdministrators can manage property listings through the JavaFX desktop application.\n\n**Create property**\\\nAdministrators can add new property listings by filling in the details such as price, address, property type, and upload images.\n\n**Update property information**\\\nDetails for existing property listings can be updated, such as changing the price.\n\n![Edit property window of the JavaFX desktop application](/JavaFX_Edit_Property.png)\n\nUploading additional images is also supported, as well as deleting existing images.\n\n![Image upload window of the JavaFX desktop application](/JavaFX_Edit_Property_Images.png)\n\n**Delete property**\\\nAdministrators can remove properties that are no longer available or relevant from the system entirely.\n\n### Bookmark property listings\n\nUsers can save properties as bookmarks to easily view them later.\nBookmarked properties are displayed on the `Account` page, where users can also remove bookmarks for listings they are no longer interested in.\n\n![Account page of the Blazor web application](/Blazor_Account.jpeg)\n\nWhen changes happen to bookmarked properties, the user will receive a notification.\nFor example, if the price is updated. In this case, the user will receive a notification about the new price of the property.\n\n### Manage agents\n\nAdministrators can manage real estate agents through the JavaFX desktop application. These agents are displayed in the Blazor web application, where customers can book them for property viewings and appointments.\n\n![Agent management window of the JavaFX desktop application](/JavaFX_Agent_List.png)\n\n**Add new agent**\\\nAdministrators can register new agents by providing the name and contact information. Once an agent has been added, they become available for booking on the web application.\n\n**Remove agent**\\\nAgents can be removed from the system if they are no longer active. This prevents customers from booking inactive agents.\n\n### Book an agent\n\n### Update user information\n\nUsers can update their information inside the Blazor web application by going to the `Account` page and then clicking on `Update Profile` button.\n\n![Update profile page of Blazor web application](/Blazor_Update_Profile.jpeg)\n\nFrom this view, users can change:\n\n- Username\n- Full name\n- Email address\n- Phone number\n- Address\n\nForm fields are pre-filled with the user's current information, making it easy to edit.\n\nAs a security measure, updating sensitive data such as the username or email address requires the user to enter their password. This is to prevent unauthorized changes in case the JWT session token is compromised.\n\n### Real-time notifications\n\nA SignalR server was implemented to handle real-time notifications.\nWhen a price change occurs, the Java REST server notifies the SignalR server, which then sends the real-time notification to the Blazor web application. This approach allows instant updates without requiring the user to refresh the page. SignalR was chosen for its speed and efficiency in delivering real-time notifications.\n"
  },
  {
    "slug": "social-network",
    "title": "Social Network",
    "date": "2025-03-22",
    "excerpt": "**BLOP** is a social network I created as a portfolio project, designed to closely mirror the functionality of modern social media platforms. My goal was to make it as realistic and feature-rich as possible, providing users with an experience they would expect from today's social networks.",
    "author": "Frederik Handberg",
    "coverImage": "/home.jpeg",
    "tags": [
      "Next.js",
      "TypeScript",
      "Prisma ORM",
      "Express",
      "Socket.IO"
    ],
    "readingTime": "9 min read",
    "content": "\nGitHub repository: [https://github.com/frederikhandberg0709/blop-social-media](https://github.com/frederikhandberg0709/blop-social-media)\n\n## Project Structure\n\nThis project is twofold, as it includes a **Next.js** project and an **Express.js** server.\n\n### Frontend & API (Next.js)\n\nThe frontend was built using Next.js. There are two main reasons for why I chose Next.js. First of all, it's a fullstack framework that makes it easy for a small team (in my case, just me), to work quickly and efficiently since it comes with most of the necessary tools out of the box. Secondly, the React documentations specifically recommend using Next.js.\n\nInstead of setting up a separate server (such as Express or Spring Boot), Next.js lets me build a REST server directly in the same project by using API routes.\n\n### Notification Service (Express.js)\n\nI mentioned earlier that one of the advantages of Next.js is that you might not need a separate server since it provides API routes. I did use API routes for all my HTTP calls.\n\nHowever, I wanted a notification service using Socket.IO. Technically, I could have built it directly in Next.js, but that would mean I couldn't use the default Next.js server – I would have to set up my own custom server in Next.js instead. Because of this, I decided it was better to have a separate Express.js server for the notification service.\n\nI chose Socket.IO mainly because I already have experience with SignalR from my third-semester project, and since Socket.IO is very similar to SignalR, it seemed like the obvious choice.\n\n## Project Features\n\nI have tried implementing the features that people expect from a modern social network. This includes the basic features such as being able to like and comment on posts, but also more advanced features, such as being able to switch accounts.\n\n### User Authentication\n\nI used NextAuth to build the authentication system, allowing users to log in with either their email or username and a password. For security, passwords are hashed using Argon2 before being stored in the database.\n\n![Login page](/login.jpeg)\n\n### Reset Password\n\nThe reset password functionality ensures that users can update their passwords if they forget it. Before submitting, the form performs validation checks:\n\n- If the new password meets security requirements\n- If the confirmation password matches the new password\n\nIf the validation passes, the request is sent to the API with the identifier (email or username) and the new password.\n\nOn the backend, in the API route, it searches for a user matching the provided identifier. If no user is found, it will return a \"User not found\" error.\n\nIf the user exists:\n\n- The new password is securely hashed using Argon2.\n- The hashed password is stored in the database, replacing the old one.\n- A success response is sent back.\n\nIn a real-world application, password resets should be handled more securely. Instead of allowing users to reset their password directly by providing their email or username, the system should send a reset link to the user's email with a token.\n\n![Reset password page](/reset-password.jpeg)\n\n### Bookmarks\n\nUsers can bookmark posts and comments they want to save for later. Bookmarks are stored in the database with a reference to the user who bookmarked it, so that the user can view their bookmarks on any device.\n\n![My bookmarks page](/my-bookmarks.jpeg)\n\n### Link Accounts\n\nUsers can link multiple accounts together. This allows switching between accounts without having to log in and out.\n\n![Link new account page](/link-new-account.jpeg)\n\nUsers can easily switch between their linked accounts by clicking on their profile menu and selecting the 'Switch Account' option, which will then display a list of all linked accounts.\n\n![Switch account widget in profile menu](/profile-menu_switch-account.png)\n\n### User Profile\n\nThe profile page includes a profile picture, banner, name, username, and a biography.  \nThis page also includes a timeline of the user's posts and counters for the number of followers, how many people the user is following, and the total number of posts from the user.\n\n![Profile page viewed by follower](/profile_follower.jpeg)\n\nThe user interface will slightly change depending on whether the user is the author of the profile or a follower. For example, if the user is the author, they will not see the 'Follow' button or notifications button. Instead, they will see an 'Edit Profile' button.\n\n![Profile page views by author](/profile_author.jpeg)\n\n### Quote Posts\n\nUsers can quote posts, which is similar to retweeting on Twitter. The original post is embedded in the new post.\n\n![Quoted post](/quoted-post.jpeg)\n\n### Notification System\n\nClicking the bell icon on a user profile, will show the notification settings to enable notifications whenever a user publishes a new post.\n\nClicking the 'Specific notifications' option, should allow the user to select which notifications they want to receive. Currently, only the 'New post' notification is working, but in the future, more options should be added.\n\n![Notification settings for profile](/profile-notification-settings.png)\n\nSocket.IO is only for sending notifications in real-time. This means, that the notifications would be lost if the user is not on the site. Therefore, notifications are also stored in the database, so that the user can see them when they return to the site.\n\nInitially, notifications are shown as unread. The user can then click on the notification to mark it as read.\n\nI should implement a dropdown menu to mark the notifications as read or delete them. Then clicking on the notification, should redirect the user to the post.\n\n![Notification panel](/notification-panel.png)\n\nThe notification panel could use some design improvements, particularly regarding timestamp formatting. Currently, timestamps display in a verbose format (e.g. \"9 seconds ago\"), which uses too much space in the compact panel. These should be converted to abbreviated formats (e.g. \"9s\") to take up less space.\n\nThe current implementation uses the same `formatDate` function that I developed for posts and comments. However, since the notification panel has more limited space than the posts, it requires a more concise timestamp format specifically made for the notification panel.\n\n## Future Development\n\nThere are some features and general improvements I would like to implement in the future.\n\n### Search functionality\n\nThere is currently a search input on the web application, but this is not functional. Users should be able to search for posts by keywords and hashtags, and to search for other users either by their profile name or username.\n\nIt should not be too difficult to implement this feature. I think one approach to implement this feature is by using URL params with the user's search input, then querying the database for posts or users that match the search input.\n\nHowever, the way I have set up the search input as of now, I would like the search results to update live as the user types. For this, the URL params approach would not be ideal.\n\nThe search functionality could be implemented client-side where the search results update in real-time as the user types, rather than using URL parameters.\n\nFirst of all, I should make sure to prevent excessive API calls as the user types. A small delay of about 300ms after the user has stopped typing could be made before sending the request to the API.  \nI already use React Query for data fetching, so I should just continue using that for the search functionality as well. It gives me caching and state management capabilities to handle search requests. This provides automatic loading states, error handling, and data caching.\n\nLastly, I will need to create a dedicated API route for searching posts and users, with filtering logic based on the search term.\n\n### Media upload\n\nUsers can add media (images and videos) to their posts.\n\nHowever, they must do this by linking to the media they want to include in their post or comment.\n\nThis is because it is not currently possible to upload media directly from the platform.\n\nThe media must be hosted elsewhere.\n\nIt would be much more ideal to allow users to upload their media directly on the platform.\n\nHow could this be implemented?\nInstead of storing the media files directly in the database, it’s best to store only metadata and file URLs.\n\nSo, we need a database table for the metadata and file URLs.\nAnd, it’s very important that the database table is storing a foreign key to the users table (who uploaded it) and a foreign key to the posts table (if attached to a post) or a foreign key to the comments table (if attached to a comment).\n\nWe need these foreign keys because otherwise, the system has no idea who uploaded the media or which post or comment it should be included in.\n\nAs stated earlier, storing media directly in a database table is less than ideal.\nThis means, the system needs a storage solution. In a real-world application, this could be done using AWS S3 as the storage solution.\n\nThe steps to upload media would be something like:\n\n1. The user uploads a file (this file is sent via `multipart/form-data`).\n2. Server should then process the file.\n   The server would need to make sure the file follows some guidelines.\n   For instance, there might be implemented a limit on how large the files are allowed to be, e.g. 5GB.\n\nThe server would also need to make sure the file type is allowed. Since this is for media uploads, it does not make sense to allow users to upload a `.txt` file.\n\nLastly, the server should make sure to save the metadata in the database table.\n\n### User interface improvements\n\nWhen I started working on this project, my goal was not to build a beautiful user interface. Instead, I wanted to focus on learning the technical aspects of building a modern and complex web application.\n\nI focused on understanding how to implement user authentication, efficiently fetch and mutate data, how to structure a large project, and leverage the features provided by React (e.g. hooks) and Next.js (e.g. API routes and the App Router).\n\nHowever, if I were to improve the visual design of the application, I would focus on implementing a light mode and ensuring that the UI looks good on all screen sizes.\n\nCurrently, the UI is optimized for desktop screens.\n"
  }
]